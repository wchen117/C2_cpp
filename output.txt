
******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit http://projects.coin-or.org/Ipopt
******************************************************************************

Starting derivative checker for first derivatives.

* grad_f[          0] =  5.0000000000000000e+03    ~  0.0000000000000000e+00  [ 5.000e+03]
* grad_f[          1] =  2.0000000000000000e+04    ~  0.0000000000000000e+00  [ 2.000e+04]
* grad_f[          2] =  1.0000000000000000e+05    ~  0.0000000000000000e+00  [ 1.000e+05]
* grad_f[          3] =  1.0000000000000000e+08    ~  0.0000000000000000e+00  [ 1.000e+08]
* grad_f[          4] =  5.0000000000000000e+03    ~  0.0000000000000000e+00  [ 5.000e+03]
* grad_f[          5] =  2.0000000000000000e+04    ~  0.0000000000000000e+00  [ 2.000e+04]
* grad_f[          6] =  1.0000000000000000e+05    ~  0.0000000000000000e+00  [ 1.000e+05]
* grad_f[          7] =  1.0000000000000000e+08    ~  0.0000000000000000e+00  [ 1.000e+08]
* grad_f[          8] =  5.0000000000000000e+03    ~  0.0000000000000000e+00  [ 5.000e+03]
* grad_f[          9] =  2.0000000000000000e+04    ~  0.0000000000000000e+00  [ 2.000e+04]
* grad_f[         10] =  1.0000000000000000e+05    ~  0.0000000000000000e+00  [ 1.000e+05]
* grad_f[         11] =  1.0000000000000000e+08    ~  0.0000000000000000e+00  [ 1.000e+08]
* grad_f[         12] =  5.0000000000000000e+03    ~  0.0000000000000000e+00  [ 5.000e+03]
* grad_f[         13] =  2.0000000000000000e+04    ~  0.0000000000000000e+00  [ 2.000e+04]
* grad_f[         14] =  1.0000000000000000e+05    ~  0.0000000000000000e+00  [ 1.000e+05]
* grad_f[         15] =  1.0000000000000000e+08    ~  0.0000000000000000e+00  [ 1.000e+08]
* grad_f[         16] =  5.0000000000000000e+03    ~  0.0000000000000000e+00  [ 5.000e+03]
* grad_f[         17] =  2.0000000000000000e+04    ~  0.0000000000000000e+00  [ 2.000e+04]
* grad_f[         18] =  1.0000000000000000e+05    ~  0.0000000000000000e+00  [ 1.000e+05]
* grad_f[         19] =  1.0000000000000000e+08    ~  0.0000000000000000e+00  [ 1.000e+08]
* grad_f[         20] =  5.0000000000000000e+03    ~  0.0000000000000000e+00  [ 5.000e+03]
* grad_f[         21] =  2.0000000000000000e+04    ~  0.0000000000000000e+00  [ 2.000e+04]
* grad_f[         22] =  1.0000000000000000e+05    ~  0.0000000000000000e+00  [ 1.000e+05]
* grad_f[         23] =  1.0000000000000000e+08    ~  0.0000000000000000e+00  [ 1.000e+08]
* grad_f[         24] =  5.0000000000000000e+03    ~  0.0000000000000000e+00  [ 5.000e+03]
* grad_f[         25] =  2.0000000000000000e+04    ~  0.0000000000000000e+00  [ 2.000e+04]
* grad_f[         26] =  1.0000000000000000e+05    ~  0.0000000000000000e+00  [ 1.000e+05]
* grad_f[         27] =  1.0000000000000000e+08    ~  0.0000000000000000e+00  [ 1.000e+08]
* grad_f[         28] =  5.0000000000000000e+03    ~  0.0000000000000000e+00  [ 5.000e+03]
* grad_f[         29] =  2.0000000000000000e+04    ~  0.0000000000000000e+00  [ 2.000e+04]
* grad_f[         30] =  1.0000000000000000e+05    ~  0.0000000000000000e+00  [ 1.000e+05]
* grad_f[         31] =  1.0000000000000000e+08    ~  0.0000000000000000e+00  [ 1.000e+08]
* grad_f[         32] =  5.0000000000000000e+03    ~  0.0000000000000000e+00  [ 5.000e+03]
* grad_f[         33] =  2.0000000000000000e+04    ~  0.0000000000000000e+00  [ 2.000e+04]
* grad_f[         34] =  1.0000000000000000e+05    ~  0.0000000000000000e+00  [ 1.000e+05]
* grad_f[         35] =  1.0000000000000000e+08    ~  0.0000000000000000e+00  [ 1.000e+08]
* grad_f[         36] =  5.0000000000000000e+03    ~  0.0000000000000000e+00  [ 5.000e+03]
* grad_f[         37] =  2.0000000000000000e+04    ~  0.0000000000000000e+00  [ 2.000e+04]
* grad_f[         38] =  1.0000000000000000e+05    ~  0.0000000000000000e+00  [ 1.000e+05]
* grad_f[         39] =  1.0000000000000000e+08    ~  0.0000000000000000e+00  [ 1.000e+08]
* grad_f[         40] =  5.0000000000000000e+03    ~  0.0000000000000000e+00  [ 5.000e+03]
* grad_f[         41] =  2.0000000000000000e+04    ~  0.0000000000000000e+00  [ 2.000e+04]
* grad_f[         42] =  1.0000000000000000e+05    ~  0.0000000000000000e+00  [ 1.000e+05]
* grad_f[         43] =  1.0000000000000000e+08    ~  0.0000000000000000e+00  [ 1.000e+08]
* grad_f[         44] =  5.0000000000000000e+03    ~  0.0000000000000000e+00  [ 5.000e+03]
* grad_f[         45] =  2.0000000000000000e+04    ~  0.0000000000000000e+00  [ 2.000e+04]
* grad_f[         46] =  1.0000000000000000e+05    ~  0.0000000000000000e+00  [ 1.000e+05]
* grad_f[         47] =  1.0000000000000000e+08    ~  0.0000000000000000e+00  [ 1.000e+08]
* grad_f[         48] =  5.0000000000000000e+03    ~  0.0000000000000000e+00  [ 5.000e+03]
* grad_f[         49] =  2.0000000000000000e+04    ~  0.0000000000000000e+00  [ 2.000e+04]
* grad_f[         50] =  1.0000000000000000e+05    ~  0.0000000000000000e+00  [ 1.000e+05]
* grad_f[         51] =  1.0000000000000000e+08    ~  0.0000000000000000e+00  [ 1.000e+08]
* grad_f[         52] =  5.0000000000000000e+03    ~  0.0000000000000000e+00  [ 5.000e+03]
* grad_f[         53] =  2.0000000000000000e+04    ~  0.0000000000000000e+00  [ 2.000e+04]
* grad_f[         54] =  1.0000000000000000e+05    ~  0.0000000000000000e+00  [ 1.000e+05]
* grad_f[         55] =  1.0000000000000000e+08    ~  0.0000000000000000e+00  [ 1.000e+08]
* grad_f[         56] =  5.0000000000000000e+03    ~  0.0000000000000000e+00  [ 5.000e+03]
* grad_f[         57] =  2.0000000000000000e+04    ~  0.0000000000000000e+00  [ 2.000e+04]
* grad_f[         58] =  1.0000000000000000e+05    ~  0.0000000000000000e+00  [ 1.000e+05]
* grad_f[         59] =  1.0000000000000000e+08    ~  0.0000000000000000e+00  [ 1.000e+08]
* grad_f[         60] =  5.0000000000000000e+03    ~  0.0000000000000000e+00  [ 5.000e+03]
* grad_f[         61] =  2.0000000000000000e+04    ~  0.0000000000000000e+00  [ 2.000e+04]
* grad_f[         62] =  1.0000000000000000e+05    ~  0.0000000000000000e+00  [ 1.000e+05]
* grad_f[         63] =  1.0000000000000000e+08    ~  0.0000000000000000e+00  [ 1.000e+08]
* grad_f[         64] =  5.0000000000000000e+03    ~  0.0000000000000000e+00  [ 5.000e+03]
* grad_f[         65] =  2.0000000000000000e+04    ~  0.0000000000000000e+00  [ 2.000e+04]
* grad_f[         66] =  1.0000000000000000e+05    ~  0.0000000000000000e+00  [ 1.000e+05]
* grad_f[         67] =  1.0000000000000000e+08    ~  0.0000000000000000e+00  [ 1.000e+08]
* grad_f[         68] =  5.0000000000000000e+03    ~  0.0000000000000000e+00  [ 5.000e+03]
* grad_f[         69] =  2.0000000000000000e+04    ~  0.0000000000000000e+00  [ 2.000e+04]
* grad_f[         70] =  1.0000000000000000e+05    ~  0.0000000000000000e+00  [ 1.000e+05]
* grad_f[         71] =  1.0000000000000000e+08    ~  0.0000000000000000e+00  [ 1.000e+08]
* grad_f[         72] = -9.9978989690804376e-01    ~  2.4493158400000000e+16  [ 1.000e+00]
* jac_g [   36,   72] =  8.7121680766788838e+00 v  ~  0.0000000000000000e+00  [ 8.712e+00]
* jac_g [   54,   72] =  1.5429125693532677e+01 v  ~  0.0000000000000000e+00  [ 1.543e+01]
* grad_f[         73] = -9.9975075529273461e-01    ~  1.0438609920000000e+17  [ 1.000e+00]
* jac_g [   37,   73] =  1.2675165844047124e-02 v  ~  0.0000000000000000e+00  [ 1.268e-02]
* jac_g [   55,   73] =  5.8219485303454031e+00 v  ~  0.0000000000000000e+00  [ 5.822e+00]
* grad_f[         74] = -9.9957151390806109e-01    ~  3.1702154240000000e+17  [ 1.000e+00]
* jac_g [   38,   74] =  1.1747954762547337e+01 v  ~  0.0000000000000000e+00  [ 1.175e+01]
* jac_g [   56,   74] =  9.5489865542509484e+00 v  ~  0.0000000000000000e+00  [ 9.549e+00]
* grad_f[         75] = -9.8728775560472515e-01    ~  8.7576837120000000e+17  [ 1.000e+00]
* jac_g [   39,   75] =  1.3703471405256358e+00 v  ~  0.0000000000000000e+00  [ 1.370e+00]
* jac_g [   57,   75] =  9.5117059759060374e-01 v  ~  0.0000000000000000e+00  [ 9.512e-01]
* grad_f[         76] = -9.9992278740264218e-01    ~ -6.0933242880000000e+17  [ 1.000e+00]
* jac_g [    4,   76] =  0.0000000000000000e+00 v  ~  9.9999999392252903e-01  [ 1.000e+00]
* jac_g [   40,   76] =  2.4000812699310046e+01 v  ~  0.0000000000000000e+00  [ 2.400e+01]
* jac_g [   58,   76] =  2.3479650682870098e+01 v  ~  0.0000000000000000e+00  [ 2.348e+01]
* grad_f[         77] = -9.9969794964608027e-01    ~  1.8646374400000000e+17  [ 1.000e+00]
* jac_g [   41,   77] =  3.3953966190523577e+00 v  ~  0.0000000000000000e+00  [ 3.395e+00]
* jac_g [   59,   77] =  1.0841356701175300e+00 v  ~  0.0000000000000000e+00  [ 1.084e+00]
* grad_f[         78] = -9.9994069433362065e-01    ~ -8.3631667200000000e+17  [ 1.000e+00]
* jac_g [    6,   78] =  0.0000000000000000e+00 v  ~  9.9999999392252903e-01  [ 1.000e+00]
* jac_g [   42,   78] =  7.9080105302957307e+01 v  ~  0.0000000000000000e+00  [ 7.908e+01]
* jac_g [   60,   78] =  6.2100395987861532e+00 v  ~  0.0000000000000000e+00  [ 6.210e+00]
* grad_f[         79] = -9.9973003825329487e-01    ~  1.3945036800000000e+17  [ 1.000e+00]
* jac_g [   43,   79] =  6.0215826785547932e-01 v  ~  0.0000000000000000e+00  [ 6.022e-01]
* jac_g [   61,   79] =  2.4668663915113251e-01 v  ~  0.0000000000000000e+00  [ 2.467e-01]
* grad_f[         80] = -9.9990685163742532e-01    ~ -4.6520043520000000e+17  [ 1.000e+00]
* jac_g [   44,   80] =  2.9288491302564658e+01 v  ~  0.0000000000000000e+00  [ 2.929e+01]
* jac_g [   62,   80] =  3.3735747098456386e+01 v  ~  0.0000000000000000e+00  [ 3.374e+01]
* grad_f[         81] = -9.7801843492872043e-01    ~  9.0619361280000000e+17  [ 1.000e+00]
* jac_g [    9,   81] =  0.0000000000000000e+00 v  ~  1.0000000050247593e+00  [ 1.000e+00]
* jac_g [   45,   81] =  1.5121679793314875e+00 v  ~  0.0000000000000000e+00  [ 1.512e+00]
* jac_g [   63,   81] =  3.6098276542933734e+00 v  ~  0.0000000000000000e+00  [ 3.610e+00]
* grad_f[         82] = -9.9991582341622243e-01    ~ -5.4131681280000000e+17  [ 1.000e+00]
* jac_g [   10,   82] =  0.0000000000000000e+00 v  ~  9.9999999392252903e-01  [ 1.000e+00]
* jac_g [   46,   82] =  1.5185136292359482e+01 v  ~  0.0000000000000000e+00  [ 1.519e+01]
* jac_g [   64,   82] =  1.8766848415792271e+01 v  ~  0.0000000000000000e+00  [ 1.877e+01]
* grad_f[         83] = -9.9873012302287290e-01    ~  6.0352097280000000e+17  [ 1.000e+00]
* jac_g [   11,   83] =  0.0000000000000000e+00 v  ~  1.0000000050247593e+00  [ 1.000e+00]
* jac_g [   47,   83] =  1.4077513752268184e-01 v  ~  0.0000000000000000e+00  [ 1.408e-01]
* jac_g [   65,   83] =  9.4146864838194571e+00 v  ~  0.0000000000000000e+00  [ 9.415e+00]
* grad_f[         84] = -9.9988588088177643e-01    ~ -3.2372756480000000e+17  [ 1.000e+00]
* jac_g [   48,   84] =  2.4799496868483629e+01 v  ~  0.0000000000000000e+00  [ 2.480e+01]
* jac_g [   66,   84] =  1.0472493063096772e+01 v  ~  0.0000000000000000e+00  [ 1.047e+01]
* grad_f[         85] = -9.9970989037424018e-01    ~  1.6988282880000000e+17  [ 1.000e+00]
* jac_g [   13,   85] =  0.0000000000000000e+00 v  ~  1.0000000050247593e+00  [ 1.000e+00]
* jac_g [   49,   85] =  3.0395908953392952e+00 v  ~  0.0000000000000000e+00  [ 3.040e+00]
* jac_g [   67,   85] =  5.0031875912336507e-03 v  ~  0.0000000000000000e+00  [ 5.003e-03]
* grad_f[         86] = -9.8372558788806408e-01    ~  8.9050096640000000e+17  [ 1.000e+00]
* jac_g [   50,   86] =  5.8373265698608046e-01 v  ~  0.0000000000000000e+00  [ 5.837e-01]
* jac_g [   68,   86] =  2.0740782168158781e-02 v  ~  0.0000000000000000e+00  [ 2.074e-02]
* grad_f[         87] = -9.9960627830710513e-01    ~  2.8748825600000000e+17  [ 1.000e+00]
* jac_g [   15,   87] =  0.0000000000000000e+00 v  ~  1.0000000050247593e+00  [ 1.000e+00]
* jac_g [   51,   87] =  1.0365140549402904e+01 v  ~  0.0000000000000000e+00  [ 1.037e+01]
* jac_g [   69,   87] =  1.2357293769071628e+01 v  ~  0.0000000000000000e+00  [ 1.236e+01]
* grad_f[         88] = -9.9470244984498102e-01    ~  8.0647075840000000e+17  [ 1.000e+00]
* jac_g [   16,   88] =  0.0000000000000000e+00 v  ~  1.0000000050247593e+00  [ 1.000e+00]
* jac_g [   52,   88] =  1.2634891742686709e+00 v  ~  0.0000000000000000e+00  [ 1.263e+00]
* grad_f[         89] = -9.9987467451678524e-01    ~ -2.6314869760000000e+17  [ 1.000e+00]
* jac_g [   53,   89] =  2.4255606730956707e+01 v  ~  0.0000000000000000e+00  [ 2.426e+01]
* jac_g [   71,   89] =  1.8408600812784154e+01 v  ~  0.0000000000000000e+00  [ 1.841e+01]

Derivative checker detected 133 error(s).

Total number of variables............................:      162
                     variables with only lower bounds:        0
                variables with lower and upper bounds:       90
                     variables with only upper bounds:        0
Total number of equality constraints.................:       10
Total number of inequality constraints...............:       62
        inequality constraints with only lower bounds:       18
   inequality constraints with lower and upper bounds:        8
        inequality constraints with only upper bounds:       36


Number of Iterations....: 100

                                   (scaled)                 (unscaled)
Objective...............:  -1.9997613164920159e+12   -1.9997613164920159e+18
Dual infeasibility......:   1.0000000000000000e+02    1.0000000000000000e+08
Constraint violation....:   0.0000000000000000e+00    0.0000000000000000e+00
Complementarity.........:   9.9999999999999994e-12    9.9999999999999991e-06
Overall NLP error.......:   1.0000000000000000e+02    1.0000000000000000e+08


Number of objective function evaluations             = 155
Number of objective gradient evaluations             = 101
Number of equality constraint evaluations            = 171
Number of inequality constraint evaluations          = 171
Number of equality constraint Jacobian evaluations   = 101
Number of inequality constraint Jacobian evaluations = 101
Number of Lagrangian Hessian evaluations             = 0
Total CPU secs in IPOPT (w/o function evaluations)   =      0.491
Total CPU secs in NLP function evaluations           =      1.704

EXIT: Maximum Number of Iterations Exceeded.
